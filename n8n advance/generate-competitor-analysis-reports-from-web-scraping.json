{
  "name": "generate-competitor-analysis-reports-from-web-scraping",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "competitors"
      },
      "id": "cr1",
      "name": "Competitor URLs Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        100,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const b=$json.body||$json;const urls=(b.urls||[]).filter(Boolean);return urls.map(u=>({json:{url:u}}));"
      },
      "id": "cr2",
      "name": "Fan-out URLs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        320,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{$json.url}}",
        "responseFormat": "string"
      },
      "id": "cr3",
      "name": "Fetch HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        540,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const html=$json; const title=(html.match(/<title>(.*?)<\\/title>/i)||[])[1]||''; const h1=(html.match(/<h1[^>]*>(.*?)<\\/h1>/is)||[])[1]||''; const metas=[...html.matchAll(/<meta[^>]+name=[\\\"\\']description[\\\"\\'][^>]+content=[\\\"\\']([^\\\"\\']*)[\\\"\\'][^>]*>/gi)]; const desc=metas[0]?.[1]||''; return [{json:{url:$prevNode['Fetch HTML'].params.url, title, h1, description:desc, htmlSnippet:html.slice(0,2000)}}];"
      },
      "id": "cr4",
      "name": "Extract Basics",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        760,
        300
      ]
    },
    {
      "parameters": {
        "model": "gpt-4",
        "temperature": 0.2,
        "messages": [
          {
            "role": "system",
            "content": "Analyze competitor web page. List value props, pricing hints, CTAs, SEO keywords, and differentiators. Return JSON {valueProps:[...], pricingSignals:[...], ctas:[...], keywords:[...], strengths:[...], weaknesses:[...]}."
          },
          {
            "role": "user",
            "content": "URL {{$json.url}} | title {{$json.title}} | h1 {{$json.h1}} | description {{$json.description}} | snippet {{$json.htmlSnippet}}"
          }
        ]
      },
      "id": "cr5",
      "name": "AI Analysis (GPT-4)",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 1,
      "position": [
        980,
        300
      ],
      "credentials": {
        "openAiApi": {
          "id": "openai_credential",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "channel": "#competitive-intel",
        "text": "Analyzed {{$prevNode['Extract Basics'].json.url}} \u2014 top keywords: {{($json.keywords||[]).slice(0,5).join(', ')}}"
      },
      "id": "cr7",
      "name": "Slack Notify",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1200,
        300
      ]
    }
  ],
  "connections": {
    "Competitor URLs Webhook": {
      "main": [
        [
          {
            "node": "Fan-out URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fan-out URLs": {
      "main": [
        [
          {
            "node": "Fetch HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch HTML": {
      "main": [
        [
          {
            "node": "Extract Basics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Basics": {
      "main": [
        [
          {
            "node": "AI Analysis (GPT-4)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis (GPT-4)": {
      "main": [
        [
          {
            "node": "Slack Notify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false
}